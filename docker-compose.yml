version: '3.9'
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    image: yilmazchef/kaartje:latest
    ports:
      - "8080" # Forward a random-exposed port (between 8000-8010) on the container to port 8080 on the host machine
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 2
    depends_on:
      - "db-server" # This service depends on mysql. Start that first
    links:
      - db-server:db-server # Link to the mysql service
    environment:
      # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db-server:3306/db?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false&autoReconnect=true&failOverReadOnly=false&maxReconnects=10&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: intec
      SPRING_DATASOURCE_PASSWORD: intec
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_DATASOURCE_INITIALSIZE: 10
      SPRING_DATASOURCE_MAXACTIVE: 100
      SPRING_DATASOURCE_MINIDLE: 10
      SPRING_DATASOURCE_MAXWAIT: 1000
      SPRING_DATASOURCE_TIMEOUT: 1000
    networks:
      # Networks to join (Services on the same network can communicate with each other using their name)
      - container-net

  # Database Service (Mysql)
  db-server:
    image: mysql:latest
    ports:
      - "3306"
    restart: always
    deploy:
      mode: replicated
      replicas: 2
    environment:
      MYSQL_DATABASE: db
      MYSQL_USER: intec
      MYSQL_PASSWORD: intec
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - db-backup:/var/lib/mysql
    networks:
      - container-net

# Volumes
volumes:
  db-backup: {}

# Networks to be created to facilitate communication between containers
networks:
  container-net: {}
